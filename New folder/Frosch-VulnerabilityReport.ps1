if (Get-Module -ListAvailable -Name ImportExcel) {
    Write-Host "ImportExcel Module exists"
} 
else {
    Write-Host "Module does not exist, installing now"
    Install-Module ImportExcel -Force
}
if(Get-Module -ListAvailable -Name Az.ResourceGraph)
{
    Write-Host "Az.ResourceGraph Module exists"    
}
else{
    Write-Host "Module does not exist, installing now"
    Install-Module Az.ResourceGraph -Force
}

<#
$context = Get-AzContext
while($null -ne $context)
{
    Disconnect-AzAccount | Out-Null
    $context = Get-AzContext
}
#>

$subscription = "e68a7784-59f4-4d93-a461-1c8666f8b3ec"
Connect-AzAccount
set-azcontext -subscriptionid $subscription

$Query = @"
securityresources
| where type == "microsoft.security/assessments/subassessments"
| extend assessmentKey = extract(".*assessments/(.+?)/.*",1,  id)
| where assessmentKey == "1195afff-c881-495e-9bc5-1486211ae03f"
| project Resource = tostring(split(tolower(extract("([\\s\\S]*?)(/providers/Microsoft.Security.*)",1,id)),'/')[-1]), ResourceGroup = trim_end("/",extract(".*resourceGroups/(.+?)/",0,id)), ResourceType = tolower(split(id,"/").[6]), subscriptionId, Severity = tostring(parse_json(properties).status.severity), Status = tostring(parse_json(properties).status.code), VulnId = tostring(parse_json(properties).id), Description = tostring(parse_json(properties).displayName), Patchable = parse_json(properties.additionalData).patchable, CVE = properties.additionalData.cve, Category = tostring(properties.category), TimeGenerated = tostring(properties.timeGenerated), Remediation = tostring(properties.remediation), Impact = tostring(properties.impact), Threat = tostring(properties.additionalData.threat)
| where Status == "Unhealthy"
| project Severity, VulnId, Description, tostring(Patchable), Category, Resource, ResourceGroup, CVE, TimeGenerated, Remediation, Impact, Threat
| mv-expand CveExpand = split (CVE, "},") to typeof(string)
| parse CveExpand with * '"title":"' singleCve '"' *
| extend hasPublicExploit = iff(CveExpand contains '"hasPublicExploit":true',"True","False")
| extend ZeroDay = iff(CveExpand contains '"isZeroDay":true',"True","False")
| extend ResourceGroup = tostring(split(ResourceGroup,'/')[-1])
| summarize CVEs = tostring(make_list(singleCve)) by Severity, VulnId, Description, Category, Resource, ResourceGroup, TimeGenerated, hasPublicExploit, ZeroDay
"@ 
$vulns= Search-AzGraph -Query $Query -Subscription $subscription -First 1000
Import-Module ImportExcel
$date= get-date -format "MM-dd-yyyy"
$excelname = "C:\temp\Frosch_Vulnerabilities-$($date).xlsx"
$vulns | Export-Excel $excelname -WorksheetName "Vulnerabilities" -KillExcel -TableName "Vulnerabilities" -FreezeTopRow -AutoSize -TableStyle Light9
$excelpackage= Open-ExcelPackage $excelname 

$PTDef =  New-PivotTableDefinition -PivotTableName "By Vulnerability" -SourceWorksheet "Vulnerabilities" -PivotRows "Description" -PivotData @{"Resource"="Count"} 
$PTDef += New-PivotTableDefinition -PivotTableName "By Asset" -SourceWorksheet "Vulnerabilities" -PivotRows "Resource" -PivotData @{"Description"="Count"} 

Export-Excel -ExcelPackage $excelpackage -PivotTableDefinition  $PTDef
